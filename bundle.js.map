{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mastermind/./src/combination.ts","webpack://mastermind/./src/dom-manipulation.ts","webpack://mastermind/./src/index.ts","webpack://mastermind/./src/listeners.ts"],"sourcesContent":["/**\n * @param {string[]} colors the available colors of the game\n * @param {number} nbPossibilities the number of possibilities by line choose by the player\n * @param {boolean} duplicate boolean that indicate if there are duplicate colors in the combination\n * @returns {string[]} a combination of X colors, where X is the number of possibilities by line\n */\nexport function generateCombination(\n  colors: string[],\n  nbPossibilities: number,\n  duplicate: boolean,\n) {\n  if (!duplicate && nbPossibilities > colors.length) {\n    throw new Error('Impossible to create a combination');\n  }\n\n  if (duplicate === false) {\n    const shuffleColors = colors.sort(() => 0.5 - Math.random());\n\n    return Array.from(new Set(shuffleColors)).slice(0, nbPossibilities);\n  }\n\n  return [...Array(nbPossibilities)].map(\n    () => colors[Math.floor(Math.random() * colors.length)],\n  );\n}\n\n/**\n *\n * @param {NodeListOf<HTMLDivElement>} currentTargets the targets which contains the current combination\n * @param {string[]} colors the available colors of the game\n * @returns {string[]} an array containing the actual combination of colors or an error if the combination is not complete\n */\nexport function getCurrentCombination(\n  currentTargets: NodeListOf<HTMLDivElement>,\n  colors: string[],\n) {\n  const combination: string[] = [];\n\n  for (let i = 0; i < currentTargets.length; i++) {\n    const currentTargetPiece = currentTargets[i].querySelector(\n      'div.target-piece',\n    ) as HTMLDivElement;\n\n    // remove all alert class\n    currentTargetPiece.classList.remove('alert');\n\n    const color = currentTargetPiece.className\n      .split(' ')\n      .filter((e) => colors.includes(e))[0];\n\n    if (!color) {\n      // Hack to make the animation restart. See: https://stackoverflow.com/questions/16050914/css-animation-doesnt-restart-when-resetting-class\n      setTimeout(() => {\n        currentTargetPiece.classList.add('alert');\n      }, 1);\n    } else {\n      combination.push(color);\n    }\n  }\n\n  if (combination.length !== currentTargets.length) {\n    throw new Error('Combination is not complete');\n  }\n\n  return combination;\n}\n\n/**\n *\n * @param {string[]} currentCombination the current combination of colors\n * @param {string[]} finalCombination the combination of colors to refer to\n * @returns {{goodPlacement : number, wrongPlacement:number}} an object containing the number of goodEmplament and wrongEmplacement of the current combination\n */\nexport function getCombinationPlacement(\n  currentCombination: string[],\n  finalCombination: string[],\n): { goodPlacement: number; wrongPlacement: number } {\n  const goodPlacement: string[] = [];\n  let wrongPlacement: string[] = [];\n\n  currentCombination.forEach((color, index) => {\n    if (finalCombination[index] === color) {\n      goodPlacement.push(color);\n\n      /**\n       * remove the color from the wrong emplacement if we already\n       * have all the good placement. This verification allow to delete\n       * the duplicates indicators.\n       * see https://github.com/RomainGuarinoni/mastermind/issues/8\n       */\n      if (\n        goodPlacement.filter((e) => e === color).length ===\n        getColorApparition(finalCombination, color)\n      ) {\n        wrongPlacement = wrongPlacement.filter((e) => e !== color);\n      }\n\n      return;\n    }\n\n    if (\n      finalCombination.includes(color) &&\n      [...goodPlacement, ...wrongPlacement].filter((e) => e === color).length <\n        getColorApparition(finalCombination, color)\n    ) {\n      wrongPlacement.push(color);\n      return;\n    }\n  });\n\n  return {\n    goodPlacement: goodPlacement.length,\n    wrongPlacement: wrongPlacement.length,\n  };\n}\n\n/**\n *\n * @param {string[]} combination a combination of colors\n * @param {string} color the available colors of the game\n * @returns {number} the number of time a color appear in a combination\n */\nexport function getColorApparition(combination: string[], color: string) {\n  return combination.filter((e) => e === color).length;\n}\n\n/**\n * @description Return an array with only the number of colors wanted\n * @param colors the initial array of colors\n * @param nbColors number of colors wanted by the player\n */\nexport function getAvailableColors(colors: string[], nbColors: number) {\n  const shuffleArray = colors.sort(() => 0.5 - Math.random());\n  return shuffleArray.slice(0, nbColors);\n}\n","export enum Indicators {\n  'white',\n  'red',\n}\n\nexport enum GameStatus {\n  running = 'Vérifier',\n  finish = 'Voir le résultat',\n}\n\ntype Display = 'block' | 'flex' | 'none' | 'inline';\n\n/**\n * @description Add a new line to the game container\n * @param {number} index the index for the line id\n * @param {HTMLDivElement} gameContainer the game container element wich contains the lines\n * @param {number} nbPossibilities the number of possibilities by line\n */\nexport function addNewGameLine(\n  round: number,\n  gameContainer: HTMLDivElement,\n  nbPossibilities: number,\n) {\n  const line = document.createElement('div');\n  line.classList.add('line');\n  line.id = `line-${round}`;\n\n  const redIndicatorContainer = document.createElement('div');\n  redIndicatorContainer.classList.add('red-indicator-container');\n\n  const whiteIndicatorContainer = document.createElement('div');\n  whiteIndicatorContainer.classList.add('white-indicator-container');\n\n  const targetContainer = document.createElement('div');\n  targetContainer.classList.add('targets-container');\n\n  for (let i = 0; i < nbPossibilities; i++) {\n    const target = document.createElement('div');\n    target.classList.add('target');\n\n    const targetPiece = document.createElement('div');\n    targetPiece.classList.add('target-piece');\n\n    target.appendChild(targetPiece);\n    targetContainer.appendChild(target);\n  }\n\n  whiteIndicatorContainer.style.width = `${nbPossibilities * 30}px`;\n  redIndicatorContainer.style.width = `${nbPossibilities * 30}px`;\n\n  line.appendChild(redIndicatorContainer);\n  line.appendChild(targetContainer);\n  line.appendChild(whiteIndicatorContainer);\n\n  gameContainer.appendChild(line);\n}\n\n/**\n * @description Add indicators to the game\n * @param {Indicators} type the type of indicators\n * @param {HTMLDivElement} container the container where to put indicators\n * @param {number} number the number of indicators to add\n */\nexport function addIndicators(\n  type: Indicators,\n  container: HTMLDivElement,\n  number: number,\n) {\n  for (let i = 0; i < number; i++) {\n    const indicator = document.createElement('div');\n\n    switch (type) {\n      case Indicators.red:\n        indicator.classList.add('red-indicator');\n        break;\n      case Indicators.white:\n        indicator.classList.add('white-indicator');\n        break;\n    }\n\n    container.appendChild(indicator);\n  }\n}\n\n/**\n * @description change the display of a specify piece\n * @param {string} color the color of the piece\n * @param {Display} display the style of display to apply\n */\nexport function changePieceDisplay(color: string, display: Display) {\n  const piece = document.getElementById(`${color}-piece`) as HTMLDivElement;\n  piece.style.display = display;\n}\n\n/**\n * @description Pick the colors available and make disappear the others\n * @param {string[]} colors an array of all the colors\n * @param {string[]} finalColors an array of wanted colors\n */\nexport function hideUnwantedColor(colors: string[], finalColors: string[]) {\n  colors.forEach((color) => {\n    if (finalColors.includes(color)) {\n      changePieceDisplay(color, 'block');\n    } else {\n      changePieceDisplay(color, 'none');\n    }\n  });\n}\n\n/**\n *\n * @param {number} round the current round index needed to find DOM elements\n * @returns {{targets:NodeListOf<HTMLDivElement>,\n * redIndicatorsContainer:HTMLDivElement,\n * whiteIndicatorsContainer:HTMLDivElement}}  An object containing the DOM elements of the game\n */\nexport function getGameDomElements(round: number) {\n  const line = document.getElementById(`line-${round}`);\n\n  if (!line) {\n    throw new Error('Line does not exist');\n  }\n\n  const targets = line.querySelectorAll(\n    `div.targets-container > div.target`,\n  ) as NodeListOf<HTMLDivElement>;\n  const redIndicatorsContainer = line.querySelector(\n    'div.red-indicator-container',\n  ) as HTMLDivElement;\n  const whiteIndicatorsContainer = line.querySelector(\n    'div.white-indicator-container',\n  ) as HTMLDivElement;\n\n  return {\n    targets,\n    redIndicatorsContainer,\n    whiteIndicatorsContainer,\n  };\n}\n\n/**\n * @description Update the value and the color of the tooltip when we hover the verify button\n * @param {HTMLDivElement} tooltip the DOM tooltip wich contains a <p> with a <span> inside\n * @param {number} currentRound The current round of the game\n * @param {number} nbTurns The total of turn possible in the current run\n */\nexport function updateTooltip(\n  tooltip: HTMLDivElement,\n  currentRound: number,\n  nbTurns: number,\n) {\n  const span = tooltip.querySelector('span');\n\n  const roundLeft = nbTurns + 1 - currentRound;\n\n  if (!span) {\n    throw new Error('No span found in the tooltip');\n  }\n\n  span.innerHTML = `${roundLeft}`;\n\n  if (roundLeft <= Math.floor(nbTurns / 3)) {\n    span.style.color = 'red';\n    return;\n  }\n\n  if (roundLeft <= Math.floor(nbTurns / 3) * 2) {\n    span.style.color = 'orange';\n    return;\n  }\n\n  span.style.color = 'green';\n}\n/**\n *\n * @returns {number} the index of the last game line\n */\nexport function getCurrentNumbersOfLine(): number {\n  return document.getElementsByClassName('line').length;\n}\n\n/**\n * @description Change the content of the verify button\n * @param {HTMLButtonElement} verifyButton\n * @param {'Verify' | 'result'} content\n */\nexport function changeGameStatus(\n  verifyButton: HTMLButtonElement,\n  status: GameStatus,\n) {\n  switch (status) {\n    case GameStatus.running:\n      verifyButton.innerHTML = GameStatus.running;\n      break;\n    case GameStatus.finish:\n      verifyButton.innerHTML = GameStatus.finish;\n      break;\n  }\n}\n\n/**\n * @description Return true if the game is finish\n * @param {HTMLButtonElement} verifyButton the verify button of the game\n * @returns {boolean} return a boolean that indict weither the game is finish or not\n */\nexport function isGameFinish(verifyButton: HTMLButtonElement): boolean {\n  if (verifyButton.innerHTML == GameStatus.finish) return true;\n\n  return false;\n}\n","import {\n  getCurrentCombination,\n  getCombinationPlacement,\n  generateCombination,\n  getAvailableColors,\n} from './combination';\n\nimport {\n  addTargetListener,\n  removeTargetListener,\n  setDragListenerOnPieces,\n  addReducePopUpListener,\n  addFormEvent,\n} from './listeners';\n\nimport {\n  addNewGameLine,\n  addIndicators,\n  Indicators,\n  hideUnwantedColor,\n  getGameDomElements,\n  updateTooltip,\n  changeGameStatus,\n  isGameFinish,\n  GameStatus,\n} from './dom-manipulation';\n\nenum EndGameStatus {\n  win,\n  lose,\n}\n\n// get the game container\nconst gameContainer = document.getElementById(\n  'game-container',\n) as HTMLDivElement;\n\n// Get all the pieces of the game\nconst bluePiece = document.getElementById('blue-piece') as HTMLDivElement;\nconst redPiece = document.getElementById('red-piece') as HTMLDivElement;\nconst greenPiece = document.getElementById('green-piece') as HTMLDivElement;\nconst yellowPiece = document.getElementById('yellow-piece') as HTMLDivElement;\nconst orangePiece = document.getElementById('orange-piece') as HTMLDivElement;\nconst blackPiece = document.getElementById('black-piece') as HTMLDivElement;\nconst whitePiece = document.getElementById('white-piece') as HTMLDivElement;\nconst marronPiece = document.getElementById('maroon-piece') as HTMLDivElement;\nconst pieces = [\n  bluePiece,\n  redPiece,\n  greenPiece,\n  yellowPiece,\n  orangePiece,\n  blackPiece,\n  whitePiece,\n  marronPiece,\n];\n\nsetDragListenerOnPieces(pieces);\n\n// All the color available in the game based on the pieces id available\nconst COLORS = pieces.map((piece) => piece.id.split('-')[0]);\n\n// Get all Popup\nconst parametersPopup = document.getElementById(\n  'parametersPopup',\n) as HTMLFormElement;\nconst winPopup = document.getElementById('win') as HTMLDivElement;\nconst losePopup = document.getElementById('lose') as HTMLDivElement;\n\naddFormEvent(parametersPopup, applyParameters);\n\n// The button of the game\nconst cancelParametersButton = document.getElementById(\n  'cancelParameters',\n) as HTMLButtonElement;\nconst verifyButton = document.getElementById('verify') as HTMLButtonElement;\nconst restartButton = document.getElementById('restart') as HTMLButtonElement;\nconst winRestartButton = document.getElementById(\n  'win-restart',\n) as HTMLButtonElement;\nconst loseRestartButton = document.getElementById(\n  'lose-restart',\n) as HTMLButtonElement;\nconst parametersButton = document.getElementById(\n  'parameters',\n) as HTMLButtonElement;\nconst reduceButtons = document.getElementsByClassName(\n  'reduce-popUp',\n) as HTMLCollectionOf<HTMLButtonElement>;\n\naddReducePopUpListener(reduceButtons);\n\n// The tooltip of the verify button\nconst verifyTooltip = document.getElementById('tooltip') as HTMLDivElement;\n\n// Parameters value from the DOM Popup\nconst duplicateCheckBox = document.getElementById(\n  'duplicateCheck',\n) as HTMLInputElement;\nconst nbColorsValue = document.getElementById(\n  'nbColorsValue',\n) as HTMLInputElement;\nconst nbTurnsValue = document.getElementById(\n  'nbTurnsValue',\n) as HTMLInputElement;\nconst nbPossibilitiesValue = document.getElementById(\n  'nbPossibilitiesValue',\n) as HTMLInputElement;\n\n// Current game round\n// min : 1 | max : nbTurns\nlet currentRound: number;\n\n// Game DOM variables\nlet currentTargets: NodeListOf<HTMLDivElement>;\nlet currentRedIndicatorsContainer: HTMLDivElement;\nlet currentWhiteIndicatorsContainer: HTMLDivElement;\n\nlet gameCombination: string[];\n\n// Game params\n\n/**\n * A boolean that indicates whether the combination can have\n * duplicate colors or not\n **/\nlet duplicate = duplicateCheckBox.checked;\n\n/**\n * The number of turns in the game\n */\nlet nbTurns = nbTurnsValue.valueAsNumber;\n\n/**\n * The number of colors available for the player\n */\nlet nbColors = nbColorsValue.valueAsNumber;\n\n/**\n * The number of colors in a line\n */\nlet nbPossibilities = nbPossibilitiesValue.valueAsNumber;\n\n/**\n * @description Reset all the HTML of the game container and start a new game\n * by generating a new combination and reset game DOM variables\n */\nfunction startNewGame() {\n  currentRound = 1;\n  updateTooltip(verifyTooltip, currentRound, nbTurns);\n  const colorsAvailable = getAvailableColors(COLORS, nbColors);\n\n  hideUnwantedColor(COLORS, colorsAvailable);\n\n  gameCombination = generateCombination(\n    colorsAvailable,\n    nbPossibilities,\n    duplicate,\n  );\n\n  gameContainer.innerHTML = '';\n  addNewGameLine(currentRound, gameContainer, nbPossibilities);\n\n  const { targets, redIndicatorsContainer, whiteIndicatorsContainer } =\n    getGameDomElements(currentRound);\n\n  currentTargets = targets;\n  currentRedIndicatorsContainer = redIndicatorsContainer;\n  currentWhiteIndicatorsContainer = whiteIndicatorsContainer;\n  addTargetListener(currentTargets, COLORS);\n\n  changeGameStatus(verifyButton, GameStatus.running);\n}\n\n/**\n * @description Remove all the events of the previous line, create a new line with the current index,\n * update the game DOM variables and add eventListeners to them\n */\nfunction createNewRound() {\n  removeTargetListener(currentTargets);\n\n  currentRound++;\n\n  updateTooltip(verifyTooltip, currentRound, nbTurns);\n\n  addNewGameLine(currentRound, gameContainer, nbPossibilities);\n  const { targets, redIndicatorsContainer, whiteIndicatorsContainer } =\n    getGameDomElements(currentRound);\n\n  currentTargets = targets;\n  currentRedIndicatorsContainer = redIndicatorsContainer;\n  currentWhiteIndicatorsContainer = whiteIndicatorsContainer;\n  addTargetListener(currentTargets, COLORS);\n}\n\n/**\n * @description Add the nbRound value to the win popup and display it\n */\nfunction displayWinPopup() {\n  (\n    document.getElementById('nb-round') as HTMLParagraphElement\n  ).innerHTML = `Tu as trouvé la combinaison en ${currentRound} tours`;\n  winPopup.style.display = 'flex';\n}\n\n/**\n * @description Add the game combination to the lose popup and display it\n */\nfunction displaylosePopup() {\n  const solutionCombinaison = document.getElementById(\n    'solution-combination',\n  ) as HTMLDivElement;\n\n  // Reset previous solution\n  solutionCombinaison.innerHTML = '';\n\n  for (let i = 0; i < gameCombination.length; i++) {\n    const div = document.createElement('div');\n    div.classList.add('piece', gameCombination[i]);\n    solutionCombinaison.appendChild(div);\n  }\n  losePopup.style.display = 'flex';\n}\n\n/**\n * @description Update the tooltip and the verify content content and display the corresponding end game popUp\n * @param {EndGameStatus} status The end game status, either win or lose\n */\nfunction handleEndGame(status: EndGameStatus) {\n  if (status === EndGameStatus.win) {\n    displayWinPopup();\n  } else {\n    displaylosePopup();\n  }\n\n  changeGameStatus(verifyButton, GameStatus.finish);\n\n  // We set currentRound+1 so that the tooltip display 0 round left\n  updateTooltip(verifyTooltip, currentRound + 1, nbTurns);\n}\n\n/**\n * @description Verify the current combination. It can either:\n *  - display an error if the currentCombination is not complete\n *  - add indicators to the current line and add a new line\n *  - display win popup if the player find the gameCombination\n *  - display lose popup if the player failed to find the gameCombination\n */\nfunction verifyCurrentCombination() {\n  let currentCombination: string[];\n\n  try {\n    currentCombination = getCurrentCombination(currentTargets, COLORS);\n  } catch (err) {\n    return;\n  }\n\n  const { goodPlacement, wrongPlacement } = getCombinationPlacement(\n    currentCombination,\n    gameCombination,\n  );\n\n  // Add the indicators only if the game is not finish\n  if (!isGameFinish(verifyButton)) {\n    addIndicators(Indicators.red, currentRedIndicatorsContainer, goodPlacement);\n\n    addIndicators(\n      Indicators.white,\n      currentWhiteIndicatorsContainer,\n      wrongPlacement,\n    );\n  }\n\n  if (goodPlacement === nbPossibilities) {\n    handleEndGame(EndGameStatus.win);\n    return;\n  }\n\n  if (currentRound === nbTurns) {\n    handleEndGame(EndGameStatus.lose);\n    return;\n  }\n\n  createNewRound();\n}\n\n/**\n * @description Set the params value and check if a new game can start with these params. If not,\n * it display an error\n */\nfunction applyParameters() {\n  duplicate = duplicateCheckBox.checked;\n  nbColors = nbColorsValue.valueAsNumber;\n  nbTurns = nbTurnsValue.valueAsNumber;\n  nbPossibilities = nbPossibilitiesValue.valueAsNumber;\n  if (duplicate === false && nbColors < nbPossibilities) {\n    alert(\n      `Attention, autorisez les doublons ou mettez un nombre de couleurs supérieur ou égal au nombre de possibilités par ligne`,\n    );\n    return;\n  }\n  parametersPopup.style.display = 'none';\n  startNewGame();\n}\n\nverifyButton.onclick = verifyCurrentCombination;\n\nrestartButton.onclick = startNewGame;\n\n// add cancel parameters event\ncancelParametersButton.onclick = () => {\n  parametersPopup.style.display = 'none';\n};\n\nparametersButton.onclick = () => {\n  parametersPopup.style.display = 'flex';\n};\n\nwinRestartButton.onclick = (e) => {\n  e.preventDefault();\n  winPopup.style.display = 'none';\n  startNewGame();\n};\n\nloseRestartButton.onclick = (e) => {\n  e.preventDefault();\n  losePopup.style.display = 'none';\n  startNewGame();\n};\n\nstartNewGame();\n","import {\n  getCurrentNumbersOfLine,\n  getGameDomElements,\n} from './dom-manipulation';\n\n/**\n * @description Set the piece data transfer to its color\n * @param {DragEvent} e the drag event of the listener\n */\nfunction setPieceDragData(e: DragEvent) {\n  const color = (e.target as Element).id.split('-')[0];\n  e.dataTransfer?.setData('text/plain', color);\n  (e.dataTransfer as DataTransfer).effectAllowed = 'move';\n}\n\n/**\n * @description listener function on drag over event\n * @param {Event} e the event of the listener\n */\nfunction setTargetDropEffect(e: Event) {\n  e.preventDefault();\n  ((e as DragEvent).dataTransfer as DataTransfer).dropEffect = 'move';\n}\n\n/**\n * @description get the color of the drag item and change the target piece\n *  background to this color\n * @param {DragEvent} e the drag event of the listener\n * @param {string[]} colors the colors available in the game\n */\nfunction setTargetBackgroundColor(e: DragEvent, colors: string[]) {\n  e.preventDefault();\n  const color = (e.dataTransfer as DataTransfer).getData('text/plain');\n  const targetPiece = (e.currentTarget as Element).querySelector(\n    'div.target-piece',\n  ) as HTMLDivElement;\n\n  targetPiece.classList.remove(...colors);\n  targetPiece.classList.add(color, 'current-target-piece');\n}\n\n/**\n * @description remove the color of a target piece if the target is clicked\n * @param {Event} e\n */\nfunction removeColorFromTarget(e: Event) {\n  const targetPiece = (e.currentTarget as Element).querySelector(\n    'div.target-piece',\n  ) as HTMLDivElement;\n\n  targetPiece.classList.remove(...targetPiece.classList.value.split(' '));\n  targetPiece.classList.add('target-piece');\n}\n\n/**\n * @description Add the drag event listeners of the targets\n * @param {NodeListOf<HTMLDivElement>} targets the targets to add eventListeners\n * @param {string[]} colors the colors available in the game\n */\nexport function addTargetListener(\n  targets: NodeListOf<HTMLDivElement>,\n  colors: string[],\n) {\n  for (let i = 0; i < targets.length; i++) {\n    targets[i].addEventListener('dragover', setTargetDropEffect, true);\n\n    targets[i].addEventListener('drop', (e) =>\n      setTargetBackgroundColor(e as DragEvent, colors),\n    ),\n      true;\n\n    targets[i].addEventListener('mousedown', removeColorFromTarget);\n  }\n}\n\n/**\n * @description Remove the drag event listener of the targets\n * @param {NodeListOf<HTMLDivElement>} target The targets to remove eventListeners\n */\nexport function removeTargetListener(targets: NodeListOf<HTMLDivElement>) {\n  for (let i = 0; i < targets.length; i++) {\n    targets[i].removeEventListener('dragover', setTargetDropEffect, true);\n    targets[i].removeEventListener('mousedown', removeColorFromTarget);\n    targets[i].classList.remove('current-target');\n  }\n}\n\n/**\n * @description Add dragStart events on game pieces\n * @param {Array<HTMLDivElement>} pieces All the pieces of the game\n */\nexport function setDragListenerOnPieces(pieces: Array<HTMLDivElement>) {\n  window.addEventListener('DOMContentLoaded', () => {\n    pieces.forEach((piece) =>\n      piece.addEventListener('dragstart', setPieceDragData),\n    );\n  });\n}\n\n/**\n *\n * @param {MouseEvent} e  The event thats created when tu user click on a reducePopup button\n */\nfunction reduceButtonPopUp(e: MouseEvent) {\n  // Remove the target listeners of the last line\n  const { targets } = getGameDomElements(getCurrentNumbersOfLine());\n  removeTargetListener(targets);\n\n  const popUp = (e.target as HTMLButtonElement).closest(\n    '.popup',\n  ) as HTMLDivElement;\n  popUp.style.display = 'none';\n}\n\n/**\n * @description Add a listener to reduce the popUp when it's reduce button is clicked\n * @param {HTMLCollectionOf<HTMLButtonElement>} buttons The list of all the reducePopUp button\n */\nexport function addReducePopUpListener(\n  buttons: HTMLCollectionOf<HTMLButtonElement>,\n) {\n  for (let i = 0; i < buttons.length; i++) {\n    buttons[i].addEventListener('click', reduceButtonPopUp);\n  }\n}\n\n/**\n * @description Add a callback to the submit event of a form\n * @param form The form\n * @param action  the callback\n */\nexport function addFormEvent(form: HTMLFormElement, action: () => void) {\n  form.addEventListener('submit', (e) => {\n    e.preventDefault();\n    action();\n  });\n}\n"],"names":["getColorApparition","combination","color","filter","e","length","Indicators","GameStatus","EndGameStatus","addNewGameLine","round","gameContainer","nbPossibilities","line","document","createElement","classList","add","id","redIndicatorContainer","whiteIndicatorContainer","targetContainer","i","target","targetPiece","appendChild","style","width","addIndicators","type","container","number","indicator","red","white","changePieceDisplay","display","getElementById","getGameDomElements","Error","targets","querySelectorAll","redIndicatorsContainer","querySelector","whiteIndicatorsContainer","updateTooltip","tooltip","currentRound","nbTurns","span","roundLeft","innerHTML","Math","floor","changeGameStatus","verifyButton","status","running","finish","setPieceDragData","split","dataTransfer","setData","effectAllowed","setTargetDropEffect","preventDefault","dropEffect","setTargetBackgroundColor","colors","getData","currentTarget","remove","removeColorFromTarget","value","addTargetListener","addEventListener","removeTargetListener","removeEventListener","reduceButtonPopUp","getElementsByClassName","closest","pieces","window","forEach","piece","setDragListenerOnPieces","action","COLORS","map","parametersPopup","winPopup","losePopup","duplicate","duplicateCheckBox","checked","nbColors","nbColorsValue","valueAsNumber","nbTurnsValue","nbPossibilitiesValue","alert","startNewGame","cancelParametersButton","restartButton","winRestartButton","loseRestartButton","parametersButton","buttons","addReducePopUpListener","currentTargets","currentRedIndicatorsContainer","currentWhiteIndicatorsContainer","gameCombination","verifyTooltip","finalColors","colorsAvailable","sort","random","slice","getAvailableColors","includes","shuffleColors","Array","from","Set","generateCombination","handleEndGame","win","solutionCombinaison","div","displaylosePopup","onclick","currentCombination","currentTargetPiece","className","push","setTimeout","getCurrentCombination","err","finalCombination","goodPlacement","wrongPlacement","index","getCombinationPlacement","isGameFinish","createNewRound","lose"],"sourceRoot":""}