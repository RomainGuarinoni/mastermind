{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mastermind/./src/combination.ts","webpack://mastermind/./src/listeners.ts","webpack://mastermind/./src/dom-manipulation.ts","webpack://mastermind/./src/index.ts"],"sourcesContent":["/**\n * @param colors the available colors of the game\n * @param nbPossibilities the number of possibilities by line choose by the player\n * @param duplicate boolean that indicate if there are duplicate colors in the combination\n * @returns a combination of X colors, where X is the number of possibilities by line\n */\nexport function generateCombination(\n  colors: string[],\n  nbPossibilities: number,\n  duplicate: boolean,\n) {\n  if (!duplicate && nbPossibilities > colors.length) {\n    throw new Error('Impossible to create a combination');\n  }\n\n  if (duplicate === false) {\n    const shuffleColors = colors.sort(() => 0.5 - Math.random());\n\n    return Array.from(new Set(shuffleColors)).slice(0, nbPossibilities);\n  }\n\n  return [...Array(nbPossibilities)].map(\n    () => colors[Math.floor(Math.random() * colors.length)],\n  );\n}\n\n/**\n *\n * @param currentTargets the targets which contains the current combination\n * @param colors the available colors of the game\n * @returns an array containing the actual combination of colors or an error if the combination is not complete\n */\nexport function getCurrentCombination(\n  currentTargets: NodeListOf<HTMLDivElement>,\n  colors: string[],\n) {\n  const combination: string[] = [];\n\n  for (let i = 0; i < currentTargets.length; i++) {\n    const currentTargetPiece = currentTargets[i].querySelector(\n      'div.target-piece',\n    ) as HTMLDivElement;\n\n    const color = currentTargetPiece.className\n      .split(' ')\n      .filter((e) => colors.includes(e))[0];\n    if (!color) {\n      throw new Error('Combination is not complete');\n    }\n\n    combination.push(color);\n  }\n\n  return combination;\n}\n\n/**\n *\n * @param currentCombination the current combination of colors\n * @param finalCombination the combination of colors to refer to\n * @returns an object containing the number of goodEmplament and wrongEmplacement of the current combination\n */\nexport function getCombinationPlacement(\n  currentCombination: string[],\n  finalCombination: string[],\n) {\n  const goodPlacement: string[] = [];\n  let wrongPlacement: string[] = [];\n\n  currentCombination.forEach((color, index) => {\n    if (finalCombination[index] === color) {\n      goodPlacement.push(color);\n\n      /**\n       * remove the color from the wrong emplacement if we already\n       * have all the good placement. This verification allow to delete\n       * the duplicates indicators.\n       * see https://github.com/RomainGuarinoni/mastermind/issues/8\n       */\n      if (\n        goodPlacement.filter((e) => e === color).length ===\n        getColorApparition(finalCombination, color)\n      ) {\n        wrongPlacement = wrongPlacement.filter((e) => e !== color);\n      }\n\n      return;\n    }\n\n    if (\n      finalCombination.includes(color) &&\n      [...goodPlacement, ...wrongPlacement].filter((e) => e === color).length <\n        getColorApparition(finalCombination, color)\n    ) {\n      wrongPlacement.push(color);\n      return;\n    }\n  });\n\n  return {\n    goodPlacement: goodPlacement.length,\n    wrongPlacement: wrongPlacement.length,\n  };\n}\n\n/**\n *\n * @param combination a combination of colors\n * @param color the available colors of the game\n * @returns the number of time a color appear in a combination\n */\nexport function getColorApparition(combination: string[], color: string) {\n  return combination.filter((e) => e === color).length;\n}\n\n/**\n * @description Return an array with only the number of colors wanted\n * @param colors the initial array of colors\n * @param nbColors number of colors wanted by the player\n */\nexport function getAvailableColors(colors: string[], nbColors: number) {\n  const shuffleArray = colors.sort(() => 0.5 - Math.random());\n  return shuffleArray.slice(0, nbColors);\n}\n","/**\n * @description Set the piece data transfer to its color\n * @param e the drag event of the listener\n */\nfunction setPieceDragData(e: DragEvent) {\n  const color = (e.target as Element).id.split('-')[0];\n  e.dataTransfer?.setData('text/plain', color);\n  (e.dataTransfer as DataTransfer).effectAllowed = 'move';\n}\n\n/**\n * @description listener function on drag over event\n * @param e the event of the listener\n */\nfunction setTargetDropEffect(e: Event) {\n  e.preventDefault();\n  ((e as DragEvent).dataTransfer as DataTransfer).dropEffect = 'move';\n}\n\n/**\n * @description get the color of the drag item and change the target piece\n *  background to this color\n * @param e the drag event of the listener\n * @param colors the colors available in the game\n */\nfunction setTargetBackgroundColor(e: DragEvent, colors: string[]) {\n  e.preventDefault();\n  const color = (e.dataTransfer as DataTransfer).getData('text/plain');\n  const targetPiece = (e.currentTarget as Element).querySelector(\n    'div.target-piece',\n  ) as HTMLDivElement;\n\n  targetPiece.classList.remove(...colors);\n  targetPiece.classList.add(color, 'current-target-piece');\n}\n\n/**\n * @description remove the color of a target piece if the target is clicked\n * @param e\n */\nfunction removeColorFromTarget(e: Event) {\n  const targetPiece = (e.currentTarget as Element).querySelector(\n    'div.target-piece',\n  ) as HTMLDivElement;\n\n  targetPiece.classList.remove(...targetPiece.classList.value.split(' '));\n  targetPiece.classList.add('target-piece');\n}\n\n/**\n * @description Add the drag event listeners of the targets\n * @param targets the targets to add eventListeners\n * @param colors the colors available in the game\n */\nexport function addTargetListener(\n  targets: NodeListOf<Element>,\n  colors: string[],\n) {\n  for (let i = 0; i < targets.length; i++) {\n    targets[i].addEventListener('dragover', setTargetDropEffect, true);\n\n    targets[i].addEventListener('drop', (e) =>\n      setTargetBackgroundColor(e as DragEvent, colors),\n    ),\n      true;\n\n    targets[i].addEventListener('mousedown', removeColorFromTarget);\n  }\n}\n\n/**\n * @description Remove the drag event listener of the targets\n * @param target The targets to remove eventListeners\n */\nexport function removeTargetListener(targets: NodeListOf<Element>) {\n  for (let i = 0; i < targets.length; i++) {\n    targets[i].removeEventListener('dragover', setTargetDropEffect, true);\n    targets[i].removeEventListener('mousedown', removeColorFromTarget);\n    targets[i].classList.remove('current-target');\n  }\n}\n\n/**\n * @description Add dragStart events on game pieces\n * @param pieces All the pieces of the game\n */\nexport function setDragListenerOnPieces(pieces: Array<HTMLDivElement>) {\n  window.addEventListener('DOMContentLoaded', () => {\n    pieces.forEach((piece) =>\n      piece.addEventListener('dragstart', setPieceDragData),\n    );\n  });\n}\n","export enum Indicators {\n  'white',\n  'red',\n}\n\ntype Display = 'block' | 'flex' | 'none' | 'inline';\n\n/**\n * @description Add a new line to the game container\n * @param index the index for the line id\n * @param gameContainer the game container element wich contains the lines\n * @param nbPossibilities the number of possibilities by line\n */\nexport function addNewGameLine(\n  round: number,\n  gameContainer: Element,\n  nbPossibilities: number,\n) {\n  const line = document.createElement('div');\n  line.classList.add('line');\n  line.id = `line-${round}`;\n\n  const redIndicatorContainer = document.createElement('div');\n  redIndicatorContainer.classList.add('red-indicator-container');\n\n  const whiteIndicatorContainer = document.createElement('div');\n  whiteIndicatorContainer.classList.add('white-indicator-container');\n\n  const targetContainer = document.createElement('div');\n  targetContainer.classList.add('targets-container');\n\n  for (let i = 0; i < nbPossibilities; i++) {\n    const target = document.createElement('div');\n    target.classList.add('target');\n\n    const targetPiece = document.createElement('div');\n    targetPiece.classList.add('target-piece');\n\n    target.appendChild(targetPiece);\n    targetContainer.appendChild(target);\n  }\n\n  line.appendChild(redIndicatorContainer);\n  line.appendChild(targetContainer);\n  line.appendChild(whiteIndicatorContainer);\n\n  gameContainer.appendChild(line);\n}\n\n/**\n * @description Add indicators to the game\n * @param type the type of indicators\n * @param container the container where to put indicators\n * @param number the number of indicators to add\n */\nexport function addIndicators(\n  type: Indicators,\n  container: Element,\n  number: number,\n) {\n  for (let i = 0; i < number; i++) {\n    const indicator = document.createElement('div');\n\n    switch (type) {\n      case Indicators.red:\n        indicator.classList.add('red-indicator');\n        break;\n      case Indicators.white:\n        indicator.classList.add('white-indicator');\n        break;\n    }\n\n    container.appendChild(indicator);\n  }\n}\n\n/**\n * @description change the display of a specify piece\n * @param color the color of the piece\n * @param display the style of display to apply\n */\nexport function changePieceDisplay(color: string, display: Display) {\n  const piece = document.getElementById(`${color}-piece`) as HTMLDivElement;\n  piece.style.display = display;\n}\n\n/**\n *\n * @param colors an array of all the colors\n * @param finalColors an array of wanted colors\n */\nexport function hideUnwantedColor(colors: string[], finalColors: string[]) {\n  colors.forEach((color) => {\n    if (finalColors.includes(color)) {\n      changePieceDisplay(color, 'block');\n    } else {\n      changePieceDisplay(color, 'none');\n    }\n  });\n}\n\n/**\n *\n * @param round the current round index needed to find DOM elements\n * @returns An object containing the DOM elements of the game\n */\nexport function getGameDomElements(round: number) {\n  const line = document.getElementById(`line-${round}`);\n\n  if (!line) {\n    throw new Error('Line does not exist');\n  }\n\n  const targets = line.querySelectorAll(\n    `div.targets-container > div.target`,\n  ) as NodeListOf<HTMLDivElement>;\n  const redIndicatorsContainer = line.querySelector(\n    'div.red-indicator-container',\n  ) as HTMLDivElement;\n  const whiteIndicatorsContainer = line.querySelector(\n    'div.white-indicator-container',\n  ) as HTMLDivElement;\n\n  return {\n    targets,\n    redIndicatorsContainer,\n    whiteIndicatorsContainer,\n  };\n}\n","import {\n  getCurrentCombination,\n  getCombinationPlacement,\n  generateCombination,\n  getAvailableColors,\n} from './combination';\n\nimport {\n  addTargetListener,\n  removeTargetListener,\n  setDragListenerOnPieces,\n} from './listeners';\n\nimport {\n  addNewGameLine,\n  addIndicators,\n  Indicators,\n  hideUnwantedColor,\n  getGameDomElements,\n} from './dom-manipulation';\n\n// get the game container\nconst gameContainer = document.getElementById(\n  'game-container',\n) as HTMLDivElement;\n\n// Get all the pieces of the game\nconst bluePiece = document.getElementById('blue-piece') as HTMLDivElement;\nconst redPiece = document.getElementById('red-piece') as HTMLDivElement;\nconst greenPiece = document.getElementById('green-piece') as HTMLDivElement;\nconst yellowPiece = document.getElementById('yellow-piece') as HTMLDivElement;\nconst orangePiece = document.getElementById('orange-piece') as HTMLDivElement;\nconst blackPiece = document.getElementById('black-piece') as HTMLDivElement;\nconst whitePiece = document.getElementById('white-piece') as HTMLDivElement;\nconst marronPiece = document.getElementById('maroon-piece') as HTMLDivElement;\nconst pieces = [\n  bluePiece,\n  redPiece,\n  greenPiece,\n  yellowPiece,\n  orangePiece,\n  blackPiece,\n  whitePiece,\n  marronPiece,\n];\n\nsetDragListenerOnPieces(pieces);\n\n// Get all Popup\nconst parametersPopup = document.getElementById(\n  'parametersPopup',\n) as HTMLDivElement;\nconst winPopup = document.getElementById('win') as HTMLDivElement;\nconst loosePopup = document.getElementById('loose') as HTMLDivElement;\n\n// All the color available in the game based on the pieces id available\nconst COLORS = pieces.map((piece) => piece.id.split('-')[0]);\n\n// The buttons of the game\nconst applyButton = document.getElementById(\n  'applyParameters',\n) as HTMLButtonElement;\nconst cancelButton = document.getElementById(\n  'cancelParameters',\n) as HTMLButtonElement;\nconst verifyButton = document.getElementById('verify') as HTMLButtonElement;\nconst restartButton = document.getElementById('restart') as HTMLButtonElement;\nconst winRestartButton = document.getElementById(\n  'win-restart',\n) as HTMLButtonElement;\nconst looseRestartButton = document.getElementById(\n  'loose-restart',\n) as HTMLButtonElement;\nconst parametersButton = document.getElementById(\n  'parameters',\n) as HTMLButtonElement;\n\n// Parameters value from the DOM Popup\nconst duplicateCheckBox = document.getElementById(\n  'duplicateCheck',\n) as HTMLInputElement;\nconst nbColorsValue = document.getElementById(\n  'nbColorsValue',\n) as HTMLInputElement;\nconst nbTurnsValue = document.getElementById(\n  'nbTurnsValue',\n) as HTMLInputElement;\nconst nbPossibilitiesValue = document.getElementById(\n  'nbPossibilitiesValue',\n) as HTMLInputElement;\n\n// Current game round\n// min : 1 | max : nbTurns\nlet currentRound: number;\n\n// Game DOM variables\nlet currentTargets: NodeListOf<HTMLDivElement>;\nlet currentRedIndicatorsContainer: HTMLDivElement;\nlet currentWhiteIndicatorsContainer: HTMLDivElement;\n\nlet gameCombination: string[];\n\n// Game params\nlet duplicate = duplicateCheckBox.checked;\nlet nbTurns = nbTurnsValue.valueAsNumber;\nlet nbColors = nbColorsValue.valueAsNumber;\nlet nbPossibilities = nbPossibilitiesValue.valueAsNumber;\n\n/**\n * @description Reset all the HTML of the game container and start a new game\n * by generating a new combination and reset game DOM variables\n */\nfunction startNewGame() {\n  currentRound = 1;\n\n  const colorsAvailable = getAvailableColors(COLORS, nbColors);\n\n  hideUnwantedColor(COLORS, colorsAvailable);\n\n  gameCombination = generateCombination(\n    colorsAvailable,\n    nbPossibilities,\n    duplicate,\n  );\n\n  gameContainer.innerHTML = '';\n  addNewGameLine(currentRound, gameContainer, nbPossibilities);\n\n  const { targets, redIndicatorsContainer, whiteIndicatorsContainer } =\n    getGameDomElements(currentRound);\n\n  currentTargets = targets;\n  currentRedIndicatorsContainer = redIndicatorsContainer;\n  currentWhiteIndicatorsContainer = whiteIndicatorsContainer;\n  addTargetListener(currentTargets, COLORS);\n}\n\n/**\n * @description Remove all the events of the previous line, create a new line with the current index,\n * update the game DOM variables and add eventListeners to them\n */\nfunction createNewRound() {\n  removeTargetListener(currentTargets);\n\n  currentRound++;\n\n  addNewGameLine(currentRound, gameContainer, nbPossibilities);\n  const { targets, redIndicatorsContainer, whiteIndicatorsContainer } =\n    getGameDomElements(currentRound);\n\n  currentTargets = targets;\n  currentRedIndicatorsContainer = redIndicatorsContainer;\n  currentWhiteIndicatorsContainer = whiteIndicatorsContainer;\n  addTargetListener(currentTargets, COLORS);\n}\n\n/**\n * @description Add the nbRound value to the win popup and display it\n */\nfunction displayWinPopup() {\n  (\n    document.getElementById('nb-round') as HTMLParagraphElement\n  ).innerHTML = `Tu as trouvé la combinaison en ${currentRound} tours`;\n  winPopup.style.display = 'flex';\n}\n\n/**\n * @description Add the game combination to the loose popup and display it\n */\nfunction displayLoosePopup() {\n  const solutionCombinaison = document.getElementById(\n    'solution-combination',\n  ) as HTMLDivElement;\n\n  // Reset previous solution\n  solutionCombinaison.innerHTML = '';\n\n  for (let i = 0; i < gameCombination.length; i++) {\n    const div = document.createElement('div');\n    div.classList.add('piece', gameCombination[i]);\n    solutionCombinaison.appendChild(div);\n  }\n  loosePopup.style.display = 'flex';\n}\n\n/**\n * @description Verify the current combination. It can either:\n *  - display an error if the currentCombination is not complete\n *  - add indicators to the current line and add a new line\n *  - display win popup if the player find the gameCombination\n *  - display loose popup if the player failed to find the gameCombination\n */\nfunction verifyCurrentCombination() {\n  let currentCombination: string[];\n\n  try {\n    currentCombination = getCurrentCombination(currentTargets, COLORS);\n  } catch (err) {\n    alert('Mettez des pions dans chaque emplacement de la ligne');\n    return;\n  }\n\n  const { goodPlacement, wrongPlacement } = getCombinationPlacement(\n    currentCombination,\n    gameCombination,\n  );\n\n  addIndicators(Indicators.red, currentRedIndicatorsContainer, goodPlacement);\n\n  addIndicators(\n    Indicators.white,\n    currentWhiteIndicatorsContainer,\n    wrongPlacement,\n  );\n\n  if (goodPlacement === nbPossibilities) {\n    displayWinPopup();\n    return;\n  }\n\n  if (currentRound === nbTurns) {\n    displayLoosePopup();\n    return;\n  }\n\n  createNewRound();\n}\n\n/**\n * @description Set the params value and check if a new game can start with these params. If not,\n * it display an error\n */\nfunction applyParameters() {\n  duplicate = duplicateCheckBox.checked;\n  nbColors = nbColorsValue.valueAsNumber;\n  nbTurns = nbTurnsValue.valueAsNumber;\n  nbPossibilities = nbPossibilitiesValue.valueAsNumber;\n  if (duplicate === false && nbColors < nbPossibilities) {\n    alert(\n      `Attention, autorisez les doublons ou mettez un nombre de couleurs supérieur ou égal au nombre de possibilités par ligne`,\n    );\n    return;\n  }\n  parametersPopup.style.display = 'none';\n  startNewGame();\n}\n\nverifyButton.onclick = verifyCurrentCombination;\n\nrestartButton.onclick = startNewGame;\n\napplyButton.onclick = applyParameters;\n\ncancelButton.onclick = () => {\n  parametersPopup.style.display = 'none';\n};\n\nparametersButton.onclick = () => {\n  parametersPopup.style.display = 'flex';\n};\n\nwinRestartButton.onclick = (e) => {\n  e.preventDefault();\n  winPopup.style.display = 'none';\n  startNewGame();\n};\n\nlooseRestartButton.onclick = (e) => {\n  e.preventDefault();\n  loosePopup.style.display = 'none';\n  startNewGame();\n};\n\nstartNewGame();\n"],"names":["getColorApparition","combination","color","filter","e","length","setPieceDragData","target","id","split","dataTransfer","setData","effectAllowed","setTargetDropEffect","preventDefault","dropEffect","setTargetBackgroundColor","colors","getData","targetPiece","currentTarget","querySelector","classList","remove","add","removeColorFromTarget","value","addTargetListener","targets","i","addEventListener","Indicators","addNewGameLine","round","gameContainer","nbPossibilities","line","document","createElement","redIndicatorContainer","whiteIndicatorContainer","targetContainer","appendChild","addIndicators","type","container","number","indicator","red","white","changePieceDisplay","display","getElementById","style","getGameDomElements","Error","querySelectorAll","redIndicatorsContainer","whiteIndicatorsContainer","pieces","window","forEach","piece","setDragListenerOnPieces","currentRound","currentTargets","currentRedIndicatorsContainer","currentWhiteIndicatorsContainer","gameCombination","parametersPopup","winPopup","loosePopup","COLORS","map","applyButton","cancelButton","verifyButton","restartButton","winRestartButton","looseRestartButton","parametersButton","duplicateCheckBox","nbColorsValue","nbTurnsValue","nbPossibilitiesValue","duplicate","checked","nbTurns","valueAsNumber","nbColors","startNewGame","finalColors","colorsAvailable","sort","Math","random","slice","getAvailableColors","includes","shuffleColors","Array","from","Set","floor","generateCombination","innerHTML","onclick","currentCombination","className","push","getCurrentCombination","err","alert","finalCombination","goodPlacement","wrongPlacement","index","getCombinationPlacement","removeEventListener","removeTargetListener","createNewRound","solutionCombinaison","div","displayLoosePopup"],"sourceRoot":""}