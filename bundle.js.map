{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://mastermind/./src/combination.ts","webpack://mastermind/./src/listeners.ts","webpack://mastermind/./src/dom-manipulation.ts","webpack://mastermind/./src/index.ts"],"sourcesContent":["/**\n *\n * @param colors the available colors of the game\n * @returns a combination of 4 colors\n */\nexport function generateCombination(colors: string[]) {\n  return [...Array(4)].map(\n    () => colors[Math.floor(Math.random() * colors.length)],\n  );\n}\n\n/**\n *\n * @param currentTargets the targets which contains the current combination\n * @param colors the available colors of the game\n * @returns an array containing the actual combination of colors or an error if the combination is not complete\n */\nexport function getCurrentCombination(\n  currentTargets: NodeListOf<Element>,\n  colors: string[],\n) {\n  const combination = Array.from(currentTargets).map((item) => {\n    const color = item.className\n      .split(' ')\n      .filter((e) => colors.includes(e))[0];\n    if (!color) {\n      throw new Error('Combination is not complete');\n    }\n\n    return color;\n  });\n\n  return combination;\n}\n\n/**\n *\n * @param currentCombination the current combination of colors\n * @param finalCombination the combination of colors to refer to\n * @returns an object containing the number of goodEmplament and wrongEmplacement of the current combination\n */\nexport function getCombinationPlacement(\n  currentCombination: string[],\n  finalCombination: string[],\n) {\n  let goodPlacement: string[] = [];\n  let wrongPlacement: string[] = [];\n\n  currentCombination.forEach((color, index) => {\n    if (finalCombination[index] === color) {\n      goodPlacement.push(color);\n\n      /**\n       * remove the color from the wrong emplacement if we already\n       * have all the good placement, it delete the duplicates\n       * indicator. see https://github.com/RomainGuarinoni/mastermind/issues/8\n       */\n      if (\n        goodPlacement.filter((e) => e === color).length ===\n        getColorApparition(finalCombination, color)\n      ) {\n        wrongPlacement = wrongPlacement.filter((e) => e !== color);\n      }\n\n      return;\n    }\n\n    if (\n      finalCombination.includes(color) &&\n      [...goodPlacement, ...wrongPlacement].filter((e) => e === color).length <\n        getColorApparition(finalCombination, color)\n    ) {\n      wrongPlacement.push(color);\n      return;\n    }\n  });\n\n  return {\n    goodPlacement: goodPlacement.length,\n    wrongPlacement: wrongPlacement.length,\n  };\n}\n\n/**\n *\n * @param combination a combination of colors\n * @param color the available colors of the game\n * @returns the number of time a color appear in a combination\n */\nexport function getColorApparition(combination: string[], color: string) {\n  return combination.filter((e) => e === color).length;\n}\n","/**\n * @description Set the piece data transfer to its color\n * @param e the drag event of the listener\n */\nexport function setPieceDragData(e: DragEvent) {\n  const color = (e.target as Element).id.split('-')[0];\n  e.dataTransfer?.setData('text/plain', color);\n  e.dataTransfer!.effectAllowed = 'move';\n}\n\n/**\n * @description listener function on drag over event\n * @param e the event of the listener\n */\nfunction setTargetDropEffect(e: Event) {\n  e.preventDefault();\n  (e as DragEvent).dataTransfer!.dropEffect = 'move';\n}\n\n/**\n * @description get the color of the drag item and change the target background to this color\n * @param e the drag event of the listener\n * @param colors the colors available in the game\n */\nfunction setTargetBackgroundColor(e: DragEvent, colors: string[]) {\n  e.preventDefault();\n  const color = e.dataTransfer!.getData('text/plain');\n  (e.target as Element).classList.remove(...colors);\n  (e.target as Element).classList.add(color, 'current-target');\n}\n\n/**\n * @description remove the color of a target if the target is clicked\n * @param e\n */\nfunction removeColorFromTarget(e: Event) {\n  (e.target as Element).classList.remove(\n    ...(e.target as Element).classList.value.split(' '),\n  );\n  (e.target as Element).classList.add('target');\n}\n\n/**\n * @description Add the drag event listeners of the targets\n * @param targets the targets to add eventListeners\n * @param colors the colors available in the game\n */\nexport function addTargetListener(\n  targets: NodeListOf<Element>,\n  colors: string[],\n) {\n  for (let i = 0; i < targets.length; i++) {\n    targets[i].addEventListener('dragover', setTargetDropEffect, true);\n\n    targets[i].addEventListener('drop', (e) =>\n      setTargetBackgroundColor(e as DragEvent, colors),\n    ),\n      true;\n\n    targets[i].addEventListener('mousedown', removeColorFromTarget);\n  }\n}\n\n/**\n * @description Remove the drag event listener of the targets\n * @param target\n */\nexport function removeTargetListener(targets: NodeListOf<Element>) {\n  for (let i = 0; i < targets.length; i++) {\n    targets[i].removeEventListener('dragover', setTargetDropEffect, true);\n    targets[i].removeEventListener('mousedown', removeColorFromTarget);\n    targets[i].classList.remove('current-target');\n  }\n}\n","export enum Indicators {\n  'white',\n  'red',\n}\n\n/**\n * @description Add a new line to the game container\n * @param index the index for the line id\n * @param gameContainer the game container element wich contains the lines\n */\nexport function addNewGameLine(round: number, gameContainer: Element) {\n  const line = document.createElement('div');\n  line.classList.add('line');\n  line.id = `line-${round}`;\n\n  const redIndicatorContainer = document.createElement('div');\n  redIndicatorContainer.classList.add('red-indicator-container');\n\n  const targetContainer = document.createElement('div');\n  targetContainer.classList.add('targets-container');\n\n  for (let i = 0; i < 4; i++) {\n    const target = document.createElement('div');\n    target.classList.add('target');\n    targetContainer.appendChild(target);\n  }\n\n  const whiteIndicatorContainer = document.createElement('div');\n  whiteIndicatorContainer.classList.add('white-indicator-container');\n\n  line.appendChild(redIndicatorContainer);\n  line.appendChild(targetContainer);\n  line.appendChild(whiteIndicatorContainer);\n\n  gameContainer.appendChild(line);\n}\n\n/**\n * @description Add indicators to the game\n * @param type the type of indicators\n * @param container the container where to put indicators\n * @param number the number of indicators to add\n */\nexport function addIndicators(\n  type: Indicators,\n  container: Element,\n  number: number,\n) {\n  for (let i = 0; i < number; i++) {\n    const indicator = document.createElement('div');\n\n    switch (type) {\n      case Indicators.red:\n        indicator.classList.add('red-indicator');\n        break;\n      case Indicators.white:\n        indicator.classList.add('white-indicator');\n        break;\n    }\n\n    container.appendChild(indicator);\n  }\n}\n","import {\n  getCurrentCombination,\n  getCombinationPlacement,\n  generateCombination,\n} from './combination';\n\nimport {\n  setPieceDragData,\n  addTargetListener,\n  removeTargetListener,\n} from './listeners';\n\nimport { addNewGameLine, addIndicators, Indicators } from './dom-manipulation';\n\n// get the game container\nconst gameContainer = document.getElementById('game-container')!;\n\n// Get all the piece of the game\nconst bluePiece = document.getElementById('blue-piece')!;\nconst redPiece = document.getElementById('red-piece')!;\nconst greenPiece = document.getElementById('green-piece')!;\nconst yellowPiece = document.getElementById('yellow-piece')!;\nconst orangePiece = document.getElementById('orange-piece')!;\nconst blackPiece = document.getElementById('black-piece')!;\nconst whitePiece = document.getElementById('white-piece')!;\nconst marronPiece = document.getElementById('maroon-piece')!;\n\nconst pieces = [\n  bluePiece,\n  redPiece,\n  greenPiece,\n  yellowPiece,\n  orangePiece,\n  blackPiece,\n  whitePiece,\n  marronPiece,\n];\n\n// Add drag event listener for each piece and setting the\n// data Transfer to the corresponding color\npieces.forEach((piece) =>\n  piece.addEventListener('dragstart', setPieceDragData),\n);\n\n// All the color available in the game based on the pieces id available\nconst COLORS = pieces.map((piece) => piece.id.split('-')[0]);\n\nconst verifyButton = document.getElementById('verify')!;\nconst restartButton = document.getElementById('restart')!;\nconst winRestartButton = document.getElementById('win-restart')!;\nconst looseRestartButton = document.getElementById('loose-restart')!;\n\nconst winPopup = document.getElementById('win')!;\nconst loosePopup = document.getElementById('loose')!;\n\n// min : 1 | max : 12\nlet currentRound: number = 0;\n\nlet currentLine: HTMLElement;\nlet currentTargets: NodeListOf<Element>;\nlet currentRedIndicatorsContainer: Element;\nlet currentWhiteIndicatorsContainer: Element;\n\nlet gameCombination: string[];\n\n/**\n * @description Start a new mastermind game\n */\nfunction startNewGame() {\n  // Reset current round\n  currentRound = 1;\n\n  // Reset game combination\n  gameCombination = generateCombination(COLORS);\n\n  // reset HTML here\n  gameContainer.innerHTML = '';\n  addNewGameLine(currentRound, gameContainer);\n\n  // Reset currentTarget and indicators\n  currentLine = document.getElementById(`line-${currentRound}`)!;\n  currentTargets = currentLine.querySelectorAll(\n    `div.targets-container > div.target`,\n  )!;\n  currentRedIndicatorsContainer = currentLine.querySelector(\n    'div.red-indicator-container',\n  )!;\n  currentWhiteIndicatorsContainer = currentLine.querySelector(\n    'div.white-indicator-container',\n  )!;\n\n  addTargetListener(currentTargets, COLORS);\n}\n\nfunction verifyCurrentCombination() {\n  // Get the current combination\n  let currentCombination: string[];\n\n  try {\n    currentCombination = getCurrentCombination(currentTargets, COLORS);\n  } catch (err) {\n    alert('Mettez des pions dans chaque emplacement de la ligne');\n    return;\n  }\n\n  const { goodPlacement, wrongPlacement } = getCombinationPlacement(\n    currentCombination,\n    gameCombination,\n  );\n\n  addIndicators(Indicators.red, currentRedIndicatorsContainer, goodPlacement);\n\n  addIndicators(\n    Indicators.white,\n    currentWhiteIndicatorsContainer,\n    wrongPlacement,\n  );\n\n  if (goodPlacement === 4) {\n    document.getElementById(\n      'nb-round',\n    )!.innerHTML = `Tu as trouvé la combinaison en ${currentRound} tours`;\n    winPopup.style.display = 'flex';\n    return;\n  }\n\n  if (currentRound === 12) {\n    const solutionCombinaison = document.getElementById(\n      'solution-combination',\n    )!;\n    for (let i = 0; i < gameCombination.length; i++) {\n      const div = document.createElement('div');\n      div.classList.add('piece', gameCombination[i]);\n      solutionCombinaison.appendChild(div);\n    }\n    loosePopup.style.display = 'flex';\n    return;\n  }\n\n  // Add a new line to the game\n  removeTargetListener(currentTargets);\n  currentRound++;\n  addNewGameLine(currentRound, gameContainer);\n  currentLine = document.getElementById(`line-${currentRound}`)!;\n  currentTargets = currentLine.querySelectorAll(\n    `div.targets-container > div.target`,\n  )!;\n  currentRedIndicatorsContainer = currentLine.querySelector(\n    'div.red-indicator-container',\n  )!;\n  currentWhiteIndicatorsContainer = currentLine.querySelector(\n    'div.white-indicator-container',\n  )!;\n  addTargetListener(currentTargets, COLORS);\n}\n\n// Add the verify event\nverifyButton.onclick = verifyCurrentCombination;\n\n// add restart event\nrestartButton.onclick = startNewGame;\n\nwinRestartButton.onclick = (e) => {\n  e.preventDefault();\n  winPopup.style.display = 'none';\n  startNewGame();\n};\n\nlooseRestartButton.onclick = (e) => {\n  e.preventDefault();\n  loosePopup.style.display = 'none';\n  startNewGame();\n};\n\nstartNewGame();\n"],"names":["getColorApparition","combination","color","filter","e","length","setPieceDragData","target","id","split","dataTransfer","setData","effectAllowed","setTargetDropEffect","preventDefault","dropEffect","setTargetBackgroundColor","colors","getData","classList","remove","add","removeColorFromTarget","value","addTargetListener","targets","i","addEventListener","Indicators","addNewGameLine","round","gameContainer","line","document","createElement","redIndicatorContainer","targetContainer","appendChild","whiteIndicatorContainer","addIndicators","type","container","number","indicator","red","white","getElementById","pieces","forEach","piece","currentLine","currentTargets","currentRedIndicatorsContainer","currentWhiteIndicatorsContainer","gameCombination","COLORS","map","verifyButton","restartButton","winRestartButton","looseRestartButton","winPopup","loosePopup","currentRound","startNewGame","Array","Math","floor","random","innerHTML","querySelectorAll","querySelector","onclick","currentCombination","from","item","className","includes","Error","getCurrentCombination","err","alert","finalCombination","goodPlacement","wrongPlacement","index","push","getCombinationPlacement","style","display","removeEventListener","removeTargetListener","solutionCombinaison","div"],"sourceRoot":""}